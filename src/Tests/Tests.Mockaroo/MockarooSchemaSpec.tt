<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Tests.Mockaroo
{
	public class MockarooSchemaSpec
	{
<# 
	var text = new System.Text.StringBuilder();
	foreach (var type in FetchDataTypes())
	{
		string intializer = (type == "Blank"? " = \"\";" : string.Empty);
		text.AppendFormat("\t\tpublic string {0}Field {{ get; set; }}{1}", ToEnumName(type), intializer);
		text.AppendLine();
	}

	Write(text.ToString());
#>
	}
}
<#+ 
public IEnumerable<string> FetchDataTypes()
{
	string path = Path.Combine(Host.ResolveAssemblyReference("$(SolutionDir)"), "Mockaroo.NET", "Fields", "mockaroo_type_list.csv");
	string[] lines = File.ReadAllLines(path);

	for (int i = 0; i < lines.Length; i++)
	{
		string val = lines[i];
		if(!string.IsNullOrWhiteSpace(val))
		{
			yield return val;
		}
	}
}

public string ToEnumName(string text)
{
	switch(text)
	{
		case "Gender (abbrev)":
			text = "GenderAbbreviated";
			break;

		case "State (abbrev)":
			text = "StateAbbreviated";
			break;

		case "Username":
			text = "UserName";
			break;

		case "Credit Card #":
			text = "CreditCardNumber";
			break;
	}

	return ToPascalCase(text);
}

public string ToPascalCase(string text, params char[] separator)
{
	if (text.Length == 1) return text.ToUpper();
	else
	{
		if (separator.Length == 0) separator = new char[] { ' ' };
		string[] words = text.Split(separator, System.StringSplitOptions.RemoveEmptyEntries);
		string pascal = "";
		
		foreach (var word in words)
		{
			pascal += char.ToUpper(word[0]) + word.Substring(1);
		}
		
		return new System.Text.RegularExpressions.Regex("[^a-zA-Z0-9]").Replace(pascal, "");
	}
}
#>