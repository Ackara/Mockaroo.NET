<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="../../T4Utilities.tt" #>
<#@ output extension=".cs" #>
namespace Gigobyte.Mockaroo.Fields.Factory
{
	/// <summary>
	/// Provides a method to create an <see cref="IField"/> from a <#= EnumTypeName #> value.
	/// </summary>
	public partial class FieldFactory : IFieldFactory<<#= EnumTypeName #>>
	{
		/// <summary>
		/// Creates a <see cref="IField"/> instance from a <#= EnumTypeName #> value.
		/// </summary>
		public IField CreateInstance(<#= EnumTypeName #> dataType)
		{
			switch(dataType)
			{
				default:
					throw new System.ArgumentException($"'{dataType}' is not a unknown data type.");

<# 
	PushIndent("\t\t\t\t");
	foreach (var type in FetchDataTypes())
	{
		WriteLine("case {0}.{1}: ", EnumTypeName, ToEnumName(type));
		WriteLine("\treturn new {0}Field();", ToEnumName(type));
	}
	PopIndent();
#>
			}
		}
	}
}