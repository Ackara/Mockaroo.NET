<#@ include file="../T4Helper.ttinclude" #>
<#@ output extension=".cs" #>
namespace <#= Host.ResolveAssemblyReference("$(RootNamespace)") #>.Fields
{
	public partial class FieldFactory
	{
		/// <summary>
		/// Creates a new <see cref="IField"/> instance.
		/// </summary>
		public static IField CreateInstance(<#= EnumTypeName #> dataType)
		{
			switch(dataType)
			{
				default:
					throw new System.ArgumentException($"'{dataType}' is not a unknown data type.");

<# 
	PushIndent("\t\t\t\t");
	foreach (var type in EnumerateDataTypes())
	{
		WriteLine("case {0}.{1}: ", EnumTypeName, ToEnumName(type));
		WriteLine("\treturn new {0}Field();", ToEnumName(type));
	}
	PopIndent();
#>
			}
		}

		/// <summary>
		/// Converts a <see cref="DataType" /> instance to its equivalent <see cref="string" /> representation.
		/// </summary>
		/// <param name="dataType">Type of the data.</param>
		/// <returns>A <see cref="string" />.</returns>
		public static string ToString(<#= EnumTypeName #> dataType)
		{
			switch (dataType)
			{
				default:
					return string.Empty;
<#
	PushIndent("\t\t\t\t");
	foreach (var type in EnumerateDataTypes())
	{
		WriteLine("case {1}.{0}:", ToEnumName(type), EnumTypeName);
		WriteLine("\treturn \"{0}\";", type);
	}
	PopIndent();
#>
			}
		}
	}
}