<#@ include file="../T4Helper.ttinclude" #>
<#@ output extension=".cs" #>
namespace <#= Host.ResolveAssemblyReference("$(RootNamespace)") #>.Fields
{
<# 
	PushIndent("\t");
	//WriteLine(GenerateFieldBaseTypes());
	foreach (var type in EnumerateDataTypes())
	{
		WriteLine("/// <summary>");
		WriteLine($"/// Represents a mockaroo {type} data-type.");
		WriteLine("/// </summary>");
		WriteLine($"/// <seealso cref=\"FieldBase\" />");
		WriteLine($"public partial class {ToEnumName(type)}Field : FieldBase");
		WriteLine("{");
		
		// Constructors
		WriteLine("\t/// <summary>");
		WriteLine($"\t/// Initializes a new instance of the <see cref=\"{ToEnumName(type)}Field\"/> class.");
		WriteLine("\t/// </summary>");
		WriteLine($"\tpublic {ToEnumName(type)}Field() : base(string.Empty)");
		WriteLine("\t{ }");
		WriteLine("");

		WriteLine("\t/// <summary>");
		WriteLine($"\t/// Initializes a new instance of the <see cref=\"{ToEnumName(type)}Field\"/> class.");
		WriteLine("\t/// </summary>");
		WriteLine("\t/// <param name=\"name\">The name of the field.</param>");
		WriteLine($"\tpublic {ToEnumName(type)}Field(string name) : base(name)");
		WriteLine("\t{ }");
		WriteLine("");
		
		// Properties

		WriteLine("\t/// <summary>");
		WriteLine("\t/// Get the data type.");
		WriteLine("\t/// </summary>");
		WriteLine(string.Format("\tpublic override {0} Type {{ get {{ return {0}.{1}; }} }}", EnumTypeName, ToEnumName(type)));
		WriteLine("");

		WriteLine("}");
	}
	ClearIndent();
#>
}
