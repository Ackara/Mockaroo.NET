<#@ include file="T4Helper.ttinclude" #>
<#@ output extension=".cs" #>
namespace <#= GetMSBuildProperty("//RootNamespace") #>
{
	/// <summary>
    /// Provides helper methods for the <see cref="Gigobyte.Mockaroo" /> namespace.
    /// </summary>
	public static partial class Extensions
	{
		/// <summary>
		/// Converts this <see cref="<#= EnumTypeName #>" /> instance to its equivalent <see cref="string" /> representation.
		/// </summary>
		/// <param name="dataType">Type of the data.</param>
		/// <returns>A <see cref="string" />.</returns>
		public static string ToMockarooTypeName(this <#= EnumTypeName #> dataType)
		{
			switch (dataType)
			{
				default:
					return string.Empty;
				<# GenerateToTypeNameMethod(); #>
			}
		}

		/// <summary>
		/// Converts the string representation of a <see cref="<#= EnumTypeName #>" /> into its <see cref="<#= EnumTypeName #>" /> equivalent.
		/// </summary>
		/// <param name="typeName">Name of the data type.</param>
        /// <returns>A <see cref="<#= EnumTypeName #>" />.</returns>
		/// <exception cref="System.ArgumentException"></exception>
		public static <#= EnumTypeName #> To<#= EnumTypeName #>(this string typeName)
		{
			switch (typeName)
			{
				default:
					throw new System.ArgumentException($"'{typeName}' is not a valid value.", nameof(typeName));
				<#  GenerateToDataTypeMethod(); #>
			}
		}
	}
}
<#+ 
public void GenerateToTypeNameMethod()
{
	PushIndent("\t\t\t\t");
	foreach (var type in FetchDataTypes())
	{
		WriteLine("case {1}.{0}:", ToEnumName(type), EnumTypeName);
		WriteLine("\treturn \"{0}\";", type);
	}
	PopIndent();
}

public void GenerateToDataTypeMethod()
{
	PushIndent("\t\t\t\t");
	foreach (var type in FetchDataTypes())
	{
		WriteLine("case \"{0}\":", type);
		WriteLine("\treturn {0}.{1};", EnumTypeName, ToEnumName(type));
	}

	PopIndent();
}
#>