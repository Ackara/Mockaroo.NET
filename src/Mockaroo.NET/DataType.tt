<#@ template hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
namespace Gigobyte.Mockaroo
{
	public enum DataType
	{
<# 
	PushIndent("\t\t");
	WriteLine(GenerateTypeCodes());
	ClearIndent();
#>
	}

	public static partial class Extensions
	{
		public static string GetName(this DataType dataType)
		{
			switch(dataType)
			{
				default:
				return string.Empty;

<# 
	PushIndent("\t\t\t\t");
	WriteLine(GenerateExtensionMethod());
	ClearIndent();
#>
			}
		}
	}
}
<#+ 
public string GenerateExtensionMethod()
{
	var text = new System.Text.StringBuilder();

	foreach (var type in FetchDataTypes())
	{
		 text.AppendFormat("case DataType.{0}:\r\n", ToPascalCase(type));
		 text.AppendFormat("return \"{0}\";\r\n\r\n", type);
	}

	return text.ToString().Trim();
}

public string GenerateTypeCodes()
{
	var text = new System.Text.StringBuilder();

	foreach (var type in FetchDataTypes())
	{
		 text.AppendFormat("{0},", ToPascalCase(type));
		 text.AppendLine();
	}
	return text.ToString().Trim();
}

public IEnumerable<string> FetchDataTypes()
{
	string path = Path.Combine(Host.ResolveAssemblyReference("$(ProjectDir)"), "mockaroo_data_types.csv");
	string[] lines = File.ReadAllLines(path);

	for (int i = 0; i < lines.Length; i++)
	{
		string val = lines[i];
		if(!string.IsNullOrWhiteSpace(val))
		{
			yield return val;
		}
	}
}

public string ToPascalCase(string text, params char[] separator)
{
	if (text.Length == 1) return text.ToUpper();
	else
	{
		if (separator.Length == 0) separator = new char[] { ' ' };
		string[] words = text.Split(separator, System.StringSplitOptions.RemoveEmptyEntries);
		string pascal = "";
		
		foreach (var word in words)
		{
			pascal += char.ToUpper(word[0]) + word.Substring(1);
		}
		
		return new System.Text.RegularExpressions.Regex("[^a-zA-Z0-9]").Replace(pascal, "");
	}
}
#>